int SPACE = 0x20, ESC = 27, ENTER = 10;
int KEY_DOWN = 0x102, KEY_UP = 0x103,
    KEY_LEFT = 0x104, KEY_RIGHT = 0x105;
int UP = 1, DOWN = ~1, LEFT = 2, RIGHT = ~2;

int width = 80, height = 24;
int maxlen = 15;
string  bg_char = " ";
string  snake_char = "@";
string food_char = "$";
int delay_time = 200;

int ys[maxlen], xs[maxlen];
int foody, foodx;
int len = 5;
int headindex;
int direction = RIGHT;
string msg;

/**************  Infix Operators *************/
infix v :@ m     (v + 1) % m;
infix a `~` b    ~a != b;
infix y `#` x    y < 1 || y > height || x < 1 || x > width;
infix y `-` x
{
    int i;
    for (i = 0; i < len; i = i + 1)
        if (ys[i] == y && xs[i] == x) return true;
    return false;
}

/********  function definitions *********/
bool run(void) {
    int newy = ys[headindex], newx = xs[headindex];
    if (direction == UP)
        newy = newy - 1;
    else if (direction == DOWN)
        newy = newy + 1;
    else if (direction == LEFT)
        newx = newx - 1;
    else
        newx = newx + 1;


    if (newy `#` newx) {
        NcMvAddStr(10,0,"Y " + newy+ " X " + newx);
        return true;//on wall?
    }
    if (newy == foody && newx == foodx)
        return eat_food();
    headindex = headindex :@ len;

    int i;
    for (i = i :@ len; i != headindex; i = i :@ len)
        if (newy == ys[i] && newx == xs[i]) {
            msg = "You failed! The snake ran into itself!";
            return true;
        }
    NcMvAddCh(ys[headindex], xs[headindex], bg_char);
    ys[headindex] = newy; xs[headindex] = newx;
    NcMvAddCh(ys[headindex], xs[headindex], snake_char);
    return false;
}

void new_food() {
    int newy, newx;
    for (;;) {
        newy = random(1, height + 1);
        newx = random(1, width + 1);
        if (!(newy `-` newx))
            break;
    }
    NcMvAddCh(newy, newx, food_char);
    foody = newy;
    foodx = newx;
}

void end_game() {
    NcTimeout(-1);
    int ch = 0;
    while (ch != SPACE && ch != ENTER && ch != 27 /*ESC*/)
        ch = NcGetCh();
    NcEndWin();
    println("end_game ch",ch);
}

void init_nc() {
    srand(time(0));
    NcInitScr();
    NcNoEcho();
    NcCursSet(false);
    NcKeypad(true);
    NcTimeout(delay_time);
}

void draw_box(int height, int width) {
    int y, x;
    for (y = 1; y <= height; y = y + 1) {
        NcMvAddCh(y, 0, "|");
        NcMvAddCh(y, width + 1, "|");
    }
    for (x = 1; x <= width; x = x + 1) {
        NcMvAddCh(0, x, "_");
        NcMvAddCh(height + 1, x, "^");
    }
    NcMvAddCh(0, 0, "+");
    NcMvAddCh(0, width + 1, "+");
    NcMvAddCh(height + 1, 0, "+");
    NcMvAddCh(height + 1, width + 1, "+");
}

void init_body() {
    int y = 1, x = 0, i;
    for (i = 0; i < len; i = i + 1) {
        ys[i] = y;
        x = x + 1;
        xs[i] = x;
        NcMvAddCh(y, x, snake_char);
    }
    new_food();
}

void pause() {
    NcTimeout(-1);
    while (NcGetCh() != SPACE) {
    }
    NcTimeout(delay_time);
}

bool eat_food() {
    if (len + 1 == maxlen) {
        msg = "You win!!! Congratulations  (^_^)";
        return true;
    }
    int i, newpos = headindex + 1;
    for (i = len; i > newpos; i = i - 1) {
        ys[i] = ys[i - 1];
        xs[i] = xs[i - 1];
    }
    ys[newpos] = foody;
    xs[newpos] = foodx;
    len = len + 1;
    headindex = headindex :@ len;
    NcMvAddCh(ys[headindex], xs[headindex], snake_char);
    new_food();
    return false;
}

void main() {
    int ch;
    bool terminate = false;

    init_nc();
    draw_box(height, width);

    headindex = len - 1;
    init_body();

    int newdir = direction;
    while (!terminate) {
        ch = NcGetCh();

        if (ch == KEY_UP)
            newdir = UP;
        else if (ch == KEY_DOWN)
            newdir = DOWN;
        else if (ch == KEY_LEFT)
            newdir = LEFT;
        else if (ch == KEY_RIGHT)
            newdir = RIGHT;
        else if (ch == SPACE)
            pause();
        else if (ch == ESC) {
            msg = "You terminated the game.";
            break;
        }

        if (newdir `~` direction)
            direction = newdir;
        terminate = run();
    }
    end_game();
}

////////////// main /////////////////
main();
